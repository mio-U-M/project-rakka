block config-block
  - title = page_name ? [page_name, meta.site_name].join(' | ') : meta.site_name

doctype html
html(lang="ja")
  head
    meta(charset="utf-8")
    // meta
    title= title
    if meta.description
      meta(name="description", content=meta.description)
    if meta.keywords && meta.keywords.length
      meta(name="keywords", content=meta.keywords.join ? meta.keywords.join(', ') : meta.keywords)
    if meta.favicon_url
      link(rel="shortcut icon", href=meta.favicon_url, type="image/vnd.microsoft.icon")
      link(rel="icon", href=meta.favicon_url, type="image/vnd.microsoft.icon")

    //- IEで「互換モード」で表示されるのを防ぐための指定
    meta(http-equiv="X-UA-Compatible", content="IE=Edge")

    //- iOSで電話番号に見える数字をリンクに設定する機能を無効にする
    meta(name="format-detection" content="telephone=no")

    // smartphone meta
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no")
    if meta.webclipicon_url
      link(rel="apple-touch-icon", href=meta.webclipicon_url)

    // ogp
    if meta.facebook_app_id
      meta(property="fb:app_id", content=meta.facebook_app_id)
    if meta.url
      meta(property="og:url", content=meta.url)
    if meta.ogp_image_url
      meta(property="og:image", content=meta.ogp_image_url)
    if meta.ogp_image_width
      meta(property="og:image:width", content=meta.ogp_image_width)
    if meta.ogp_image_height
      meta(property="og:image:height", content=meta.ogp_image_height)
    meta(property="og:type", content=meta.ogp_type || "website")
    meta(property="og:title", content=title)
    meta(property="og:site_name", content=meta.site_name)
    meta(property="og:description", content=meta.description)
    meta(property="og:locale", content=meta.ogp_locale || "ja_JP")

    // twitter card
    meta(property="twitter:card", content=(meta.ogp_image_url ? 'summary_large_image' : 'summary'))
    meta(property="twitter:title", content=title)
    meta(property="twitter:description", content=meta.description)
    if meta.ogp_image_url
      meta(property="twitter:image", content=meta.ogp_image_url)
    if twitter_card_owner
      meta(property="twitter:site", content=meta.twitter_card_owner)
      meta(property="twitter:creator", content=meta.twitter_card_owner)

    if meta.url
      // canonical url
      //- このページをはてぶ・シェアする際、使われるべきURLを明示する指定
      //- wwwやhttps、getパラメータなど、微妙に違うURLでアクセスされても、使われるURLをひとつに絞れる
      link(rel="canonical" href=meta.url)

    // stylesheet
    block stylesheet-block
      link(href="https://fonts.googleapis.com/earlyaccess/hannari.css" rel="stylesheet")
    
    block javascript-block
      script(src="js/three.min.js")
      script(id="vertexShader" type="x-shader/x-vertex").
          void main() {
              gl_Position = vec4( position, 1.0 );
          }
      script(id="fragmentShader" type="x-shader/x-fragment").
          precision mediump float;
          uniform vec2  u_resolution;     // u_resolution (width, height)
          uniform vec2  u_mouse;          // u_mouse      (0.0 ~ 1.0)
          uniform float u_time;           // u_time       (1second == 1.0)

          const float PI = 3.1415926;


          // noise from : https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl ----
          vec3 mod289(vec3 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
          }

          vec2 mod289(vec2 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
          }

          vec3 permute(vec3 x) {
            return mod289(((x*34.0)+1.0)*x);
          }

          float snoise(vec2 v)
            {
            const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                                0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                              -0.577350269189626,  // -1.0 + 2.0 * C.x
                                0.024390243902439); // 1.0 / 41.0
          // First corner
            vec2 i  = floor(v + dot(v, C.yy) );
            vec2 x0 = v -   i + dot(i, C.xx);

          // Other corners
            vec2 i1;
            //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
            //i1.y = 1.0 - i1.x;
            i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
            // x0 = x0 - 0.0 + 0.0 * C.xx ;
            // x1 = x0 - i1 + 1.0 * C.xx ;
            // x2 = x0 - 1.0 + 2.0 * C.xx ;
            vec4 x12 = x0.xyxy + C.xxzz;
            x12.xy -= i1;

          // Permutations
            i = mod289(i); // Avoid truncation effects in permutation
            vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
              + i.x + vec3(0.0, i1.x, 1.0 ));

            vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
            m = m*m ;
            m = m*m ;

          // Gradients: 41 points uniformly over a line, mapped onto a diamond.
          // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

            vec3 x = 2.0 * fract(p * C.www) - 1.0;
            vec3 h = abs(x) - 0.5;
            vec3 ox = floor(x + 0.5);
            vec3 a0 = x - ox;

          // Normalise gradients implicitly by scaling m
          // Approximation of: m *= inversesqrt( a0*a0 + h*h );
            m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

          // Compute final noise value at P
            vec3 g;
            g.x  = a0.x  * x0.x  + h.x  * x0.y;
            g.yz = a0.yz * x12.xz + h.yz * x12.yw;
            return 130.0 * dot(m, g);
          }

          // -------
          void main(){
              vec2 st = gl_FragCoord.xy / u_resolution.xy;
              st.x *= u_resolution.x / u_resolution.y;
              vec3 color = vec3(0.0);
              vec2 pos = vec2(st*1.5);
              
              float DF = 0.0;
              
              float a = 0.0;
              vec2 vel = vec2(u_time * 0.015);
              DF += snoise(pos+vel) * 0.35 + 0.35;
              
              a = snoise(pos*vec2(cos(u_time * 0.006),sin(u_time * 0.06))*0.1) * PI;
              vel = vec2(cos(a),sin(a));
              DF += snoise(pos+vel)* 0.256;
              
              color = vec3(smoothstep(0.6, 0.85,fract(DF)));
              color *= vec3(snoise(st)*.5 / 0.3);
              
              vec3 destColor = vec3(1.0 * sin(u_time * 0.15), 0.2, 1.0 * cos(u_time * 0.15));
              
              gl_FragColor = vec4(1.0 - (destColor * color), 1.0);
          }

      //- script(id="vertexShader" type="x-shader/x-vertex" src="/shader/scene.vert")
      //- script(id="fragmentShader" type="x-shader/x-fragment" src="/shader/scene.frag")
  body
    .wrapper
      block content-block

    // javascript
    block javascript-block
